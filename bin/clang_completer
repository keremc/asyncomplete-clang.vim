#!/usr/bin/env python2

from __future__ import print_function

import json

from clang.cindex import Config, Index


class Completer(object):
    def __init__(self):
        if not Config.loaded:
            Config.set_compatibility_check(False)
        self.__idx = Index.create()
        self.__trans_units = {}

    def __collect_args(self, path):
        return [
            '-std=c++14',
            '-I/usr/include/c++/7',
            '-I/usr/include/c++/7/x86_64-redhat-linux',
            '-I/usr/include/c++/7/backward',
            '-I/usr/local/include',
            '-I/usr/lib64/clang/4.0.1/include',
            '-I/usr/include'
        ]

    def parse(self, path, buf):
        if path in self.__trans_units:
            tu = self.__trans_units[path]
            tu.reparse([(path, buf)])
        else:
            tu = self.__idx.parse(path, self.__collect_args(path), [(path, buf)])
            self.__trans_units[path] = tu

    def __process_comp_str(self, string):
        word = ''
        abbr = ''
        menu = ''

        if string.availability.name in ['NotAvailable', 'NotAccessible']:
            return None

        for s in string:
            if s.isKindTypedText():
                word = s.spelling
                abbr += s.spelling
            elif s.isKindResultType():
                menu = s.spelling
            elif s.kind.name in ['LeftAngle', 'LeftParen', 'Placeholder',
                    'Comma', 'RightParen', 'RightAngle']:
                abbr += s.spelling

        return {'word': word, 'abbr': abbr, 'menu': menu, 'dup': 1}

    def get_comps(self, path, line, col, buf):
        comps = []

        tu = self.__trans_units[path]
        results = tu.codeComplete(path, line, col, [(path, buf)], True)

        for res in results.results:
            comp = self.__process_comp_str(res.string)
            if comp is not None:
                comps.append(comp)

        return comps


while True:
    line = raw_input()
    req = json.loads(line)

    path = str(req['path'])
    col = req['col']
    buf = str(req['buf'])

    completer = Completer()
    completer.parse(path, buf)
    comps = completer.get_comps(path, req['line'], col, buf)

    print(json.dumps({'comps': comps, 'id': req['id'], 'col': col}))
